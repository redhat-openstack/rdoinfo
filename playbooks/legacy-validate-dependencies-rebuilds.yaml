- hosts: all
  name: Autoconverted job legacy-validate-dependencies-rebuilds from old job validate-dependencies-rebuilds
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - name: clone
      shell:
        cmd: |
          echo "[DEBUG]: JJB template name: {template-name}"

          # If this is called in a periodic job, these will not be set
          echo "Use default for ZUUL_BRANCH and ZUUL_REF if needed"
          export ZUUL_BRANCH=${ZUUL_BRANCH:-master}
          export ZUUL_REF=${ZUUL_REF:-None}

          # In the post pipeline ZUUL_REF is master but does not behave as we want
          # So fall back on None
          [ "$ZUUL_REF" = "master" ] && ZUUL_REF=None
          echo "Clean workspace"
          rm -Rf ./*

          echo "Clone $ZUUL_PROJECT"
          # zuul-cloner is installed as /usr/zuul-env/bin/zuul-cloner
          # in upstream images
          export PATH=$PATH:/usr/zuul-env/bin

          # Note (dmsimard): If we are running for a periodic job, there is no
          # incentive in using Zuul cloner because the jobs are not going to
          # potentially depend on things from the zuul context (ex: depends-on)
          # The zuul git namespace (where the job was triggered from) is also
          # wonky for periodic jobs. A periodic pipeline targetted at an
          # upstream project would still end up trying to clone from review.rdo.
          # This should be revisited in Zuul v3 which is supposedly not a
          # problem

          # We can receive reviews from review.openstack.org.
          # Builds that are run as third party for review.o.o are in the Zuul
          # pipelines prefixed by "openstack-".
          GIT_SOURCE="https://review.rdoproject.org/r"
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              GIT_SOURCE="https://opendev.org"
          fi

          git config --global http.postBuffer 524288000
          git config --global https.postBuffer 524288000

        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
      changed_when: true

    - name: create rdo_rebuilds_file
      shell:
        cmd: |
          set -e
          # Install requirements
          virtualenv --system-site-packages .venv
          . .venv/bin/activate
          pip install rdopkg

          # Create file to store required rebuilds
          mkdir -p $WORKSPACE/logs
          fedora_rebuilds_file="$WORKSPACE/logs/fedora_rebuilds.txt"
          rdo_rebuilds_file="$WORKSPACE/logs/rdo_rebuilds.txt"
          touch $fedora_rebuilds_file
          touch $rdo_rebuilds_file

          pushd {{ ansible_user_dir }}/{{ zuul.projects['review.rdoproject.org/rdoinfo'].src_dir }}
          BUILDSYS_TAGS_DIFF=$(rdopkg info-tags-diff -b .)
          while read line; do
              pkg_name=$(echo $line |cut -d " " -f 1)
              tags=$(echo $line |cut -d " " -f 2-| tr -d [],\')
              for tag in $tags
              do
                  # needs distroinfo release https://softwarefactory-project.io/r/#/c/17613/
                  tag=$(echo $tag | sed -e 's/dict_keys(//;s/)//')
                  PHASE=$(echo $tag|awk -F'-' '{print $4}')
                  if [ "$PHASE" != "candidate" ]; then
                      continue
                  fi
                  build=$(rdopkg info -l . "name:^${pkg_name}$"| awk "/${tag}/{print \$2}")
                  if [[ "$tag" == *"cloud8"* ]]; then
                     DIST_VER=8
                  else
                     DIST_VER=7
                  fi
                  target=${tag//-candidate/-el${DIST_VER}}
                  config=$(rdopkg info -l . "name:^${pkg_name}$"| awk '/^conf:/{print $2}')
                  if [ $config = "fedora-dependency" ]; then
                      echo "$target $build" | tee -a $fedora_rebuilds_file
                  elif [ $config = "rdo-dependency" ]; then
                      echo "$target $build" | tee -a $rdo_rebuilds_file
                  fi
              done
          done <<< "${BUILDSYS_TAGS_DIFF}"
          popd
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
      changed_when: true

    - name: cbs buildinfo
      shell:
        cmd: |
          set +e
          sudo {{ ansible_pkg_mgr }} install -y git centos-packager

          FAILED=0
          fedora_rebuilds_file="$WORKSPACE/logs/fedora_rebuilds.txt"
          rdo_rebuilds_file="$WORKSPACE/logs/rdo_rebuilds.txt"
          pushd {{ ansible_user_dir }}/{{ zuul.projects['review.rdoproject.org/gating_scripts'].src_dir }}
          # Validate rebuilds of builds with config fedora-dependency
          echo "INFO: Validating updates for fedora-dependencies packages"
          while read target build
          do
              if [ -z $target -o -z $build ]; then
                  continue
              fi
              echo "INFO: Checking for $build on CBS"
              cbs buildinfo $build 2>&1|grep "State:.*COMPLETE"
              # If build already exist in CBS, do not need to rebuild
              # it from fedora
              if [ $? -eq 0 ];then
                  echo "INFO: build $build exists in CBS"
                  continue
              fi
              echo "INFO: validating $build on $target"
              ./validate_rebuild_fedora.sh $target $build
              if [ $? -ne 0 ];then
                  echo "ERROR: validation of $build failed on $target"
                  FAILED=1
              fi
          done <<< "$(cat $fedora_rebuilds_file)"
          # Check if builds with config rdo-dependency exist in CBS
          echo "INFO: Validating updates for rdo-dependencies packages"
          while read target build
          do
              if [ -z $target -o -z $build ]; then
                  continue
              fi
              echo "INFO: Checking for $build on CBS"
              cbs buildinfo $build 2>&1|grep "State:.*COMPLETE"
              if [ $? -ne 0 ];then
                  echo "ERROR: build $build does not exist in CBS"
                  FAILED=1
              fi
          done <<< "$(cat $rdo_rebuilds_file)"
          popd
          exit $FAILED
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
      changed_when: true
